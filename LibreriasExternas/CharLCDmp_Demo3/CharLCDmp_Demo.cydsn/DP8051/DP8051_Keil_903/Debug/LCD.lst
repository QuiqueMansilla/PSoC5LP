C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\LCD.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.2\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\LCD.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\LCD.lst) CD DB NOIP OT(2,S
                    -IZE) DF(DEBUG) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\LCD.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: LCD.c
   3          * Version 1.1
   4          *
   5          * Description:
   6          *  This file provides source code for the Character LCD component's API.
   7          *
   8          * Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "CyLib.h"
  18          #include "LCD.h"
  19          
  20          
  21          static void LCD_WrDatNib(uint8 nibble) ;
  22          static void LCD_WrCntrlNib(uint8 nibble) ;
  23          
  24          /* Stores the state of conponent. Indicates wherewer component is 
  25          * in enable state or not.
  26          */
  27          uint8 LCD_enableState = 0u;
  28          
  29          uint8 LCD_initVar = 0u;
  30          
  31          
  32          /*******************************************************************************
  33          * Function Name: LCD_Init
  34          ********************************************************************************
  35          *
  36          * Summary:
  37          *  Perform initialization required for components normal work.
  38          *  This function initializes the LCD hardware module as follows:
  39          *        Enable 4-bit interface
  40          *        Clear the display
  41          *        Enable auto cursor increment
  42          *        Resets the cursor to start position
  43          *  Also loads custom character set to LCD if it was defined in the customizer.
  44          *
  45          * Parameters:
  46          *  None.
  47          *
  48          * Return:
  49          *  None.
  50          *
  51          * Reentrant:
  52          *  No.
  53          *
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 2   

  54          *******************************************************************************/
  55          void LCD_Init(void) 
  56          {
  57   1          /* INIT CODE */
  58   1          CyDelay(40u);                                                        /* Delay 40 ms */
  59   1          LCD_WrCntrlNib(LCD_DISPLAY_8_BIT_INIT);   /* Selects 8-bit mode */
  60   1          CyDelay(5u);                                                         /* Delay 5 ms */
  61   1          LCD_WrCntrlNib(LCD_DISPLAY_8_BIT_INIT);   /* Selects 8-bit mode */
  62   1          CyDelay(15u);                                                        /* Delay 15 ms */
  63   1          LCD_WrCntrlNib(LCD_DISPLAY_8_BIT_INIT);   /* Selects 8-bit mode */
  64   1          CyDelay(1u);                                                         /* Delay 1 ms */
  65   1          LCD_WrCntrlNib(LCD_DISPLAY_4_BIT_INIT);   /* Selects 4-bit mode */
  66   1          CyDelay(5u);                                                         /* Delay 5 ms */
  67   1      
  68   1          LCD_WriteControl(LCD_CURSOR_AUTO_INCR_ON);    /* Incr Cursor After Writes */
  69   1          LCD_WriteControl(LCD_DISPLAY_CURSOR_ON);      /* Turn Display, Cursor ON */
  70   1          LCD_WriteControl(LCD_DISPLAY_2_LINES_5x10);   /* 2 Lines by 5x10 Characters */
  71   1          LCD_WriteControl(LCD_DISPLAY_CURSOR_OFF);     /* Turn Display, Cursor OFF */
  72   1          LCD_WriteControl(LCD_CLEAR_DISPLAY);          /* Clear LCD Screen */
  73   1          LCD_WriteControl(LCD_DISPLAY_ON_CURSOR_OFF);  /* Turn Display ON, Cursor OFF */
  74   1          LCD_WriteControl(LCD_RESET_CURSOR_POSITION);  /* Set Cursor to 0,0 */
  75   1          CyDelay(5u);
  76   1      
  77   1          #if(LCD_CUSTOM_CHAR_SET != LCD_NONE)
  78   1              LCD_LoadCustomFonts(LCD_customFonts);
  79   1          #endif /* LCD_CUSTOM_CHAR_SET != LCD_NONE */
  80   1      }
  81          
  82          
  83          /*******************************************************************************
  84          * Function Name: LCD_Enable
  85          ********************************************************************************
  86          *
  87          * Summary:
  88          *  Turns on the display.
  89          *
  90          * Parameters:
  91          *  None.
  92          *
  93          * Return:
  94          *  None.
  95          *
  96          * Reentrant:
  97          *  No.
  98          *
  99          * Theory:
 100          *  This finction has no effect when it called first time as
 101          *  LCD_Init() turns on the LCD.
 102          *
 103          *******************************************************************************/
 104          void LCD_Enable(void) 
 105          {
 106   1          LCD_DisplayOn();
 107   1          LCD_enableState = 1u;
 108   1      }
 109          
 110          
 111          /*******************************************************************************
 112          * Function Name: LCD_Start
 113          ********************************************************************************
 114          *
 115          * Summary:
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 3   

 116          *  Perform initialization required for components normal work.
 117          *  This function initializes the LCD hardware module as follows:
 118          *        Enable 4-bit interface
 119          *        Clear the display
 120          *        Enable auto cursor increment
 121          *        Resets the cursor to start position
 122          *  Also loads custom character set to LCD if it was defined in the customizer.
 123          *  If it was not the first call in this project then it just turns on the
 124          *  display
 125          *
 126          *
 127          * Parameters:
 128          *  LCD_initVar - global variable.
 129          *
 130          * Return:
 131          *  LCD_initVar - global variable.
 132          *
 133          * Reentrant:
 134          *  No.
 135          *
 136          *******************************************************************************/
 137          void LCD_Start(void) 
 138          {
 139   1          /* If not initialized then perform initialization */
 140   1          if(LCD_initVar == 0u)
 141   1          {
 142   2              LCD_Init();
 143   2              LCD_initVar = 1u;
 144   2          }
 145   1      
 146   1          /* Turn on the LCD */
 147   1          LCD_Enable();
 148   1      }
 149          
 150          
 151          /*******************************************************************************
 152          * Function Name: LCD_Stop
 153          ********************************************************************************
 154          *
 155          * Summary:
 156          *  Turns off the display of the LCD screen.
 157          *
 158          * Parameters:
 159          *  None.
 160          *
 161          * Return:
 162          *  None.
 163          *
 164          * Reentrant:
 165          *  No.
 166          *
 167          *******************************************************************************/
 168          void LCD_Stop(void) 
 169          {
 170   1          /* Calls LCD Off Macro */
 171   1          LCD_DisplayOff();
 172   1          LCD_enableState = 0u;
 173   1      }
 174          
 175          
 176          /*******************************************************************************
 177          *  Function Name: LCD_Position
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 4   

 178          ********************************************************************************
 179          *
 180          * Summary:
 181          *  Moves active cursor location to a point specified by the input arguments
 182          *
 183          * Parameters:
 184          *  row:     Specific row of LCD module to be written
 185          *  column:  Column of LCD module to be written
 186          *
 187          * Return:
 188          *  None.
 189          *
 190          * Note:
 191          *  This only applies for LCD displays which use the 2X40 address mode.
 192          *  This results in Row 2 offset from row one by 0x28.
 193          *  When there are more than 2 rows, each row must be fewer than 20 characters.
 194          *
 195          *******************************************************************************/
 196          void LCD_Position(uint8 row, uint8 column) 
 197          {
 198   1          switch (row)
 199   1          {
 200   2              case (uint8)0:
 201   2                  LCD_WriteControl(LCD_ROW_0_START + column);
 202   2                  break;
 203   2              case (uint8) 1:
 204   2                  LCD_WriteControl(LCD_ROW_1_START + column);
 205   2                  break;
 206   2              case (uint8) 2:
 207   2                  LCD_WriteControl(LCD_ROW_2_START + column);
 208   2                  break;
 209   2              case (uint8) 3:
 210   2                  LCD_WriteControl(LCD_ROW_3_START + column);
 211   2                  break;
 212   2              default:
 213   2                  /* if default case is hit, invalid row argument was passed.*/
 214   2                  break;
 215   2          }
 216   1      }
 217          
 218          
 219          /*******************************************************************************
 220          * Function Name: LCD_PrintString
 221          ********************************************************************************
 222          *
 223          * Summary:
 224          *  Writes a zero terminated string to the LCD.
 225          *
 226          * Parameters:
 227          *  string:  pointer to head of char8 array to be written to the LCD module
 228          *
 229          * Return:
 230          *  None.
 231          *
 232          *******************************************************************************/
 233          void LCD_PrintString(char8 const string[]) 
 234          {
 235   1          uint8 indexU8 = 1u;
 236   1          char8 current = *string;
 237   1      
 238   1          /* Until null is reached, print next character */
 239   1          while((char8) '\0' != current)
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 5   

 240   1          {
 241   2              LCD_WriteData((uint8)current);
 242   2              current = string[indexU8];
 243   2              indexU8++;
 244   2          }
 245   1      }
 246          
 247          
 248          /*******************************************************************************
 249          *  Function Name: LCD_PutChar
 250          ********************************************************************************
 251          *
 252          * Summary:
 253          *  Writes a single character to the current cursor position of the LCD module.
 254          *  Custom character names (_CUSTOM_0 through
 255          *  _CUSTOM_7) are acceptable as inputs.
 256          *
 257          * Parameters:
 258          *  character:  character to be written to the LCD
 259          *
 260          * Return:
 261          *  None.
 262          *
 263          *******************************************************************************/
 264          void LCD_PutChar(char8 character) 
 265          {
 266   1          LCD_WriteData((uint8)character);
 267   1      }
 268          
 269          
 270          /*******************************************************************************
 271          *  Function Name: LCD_WriteData
 272          ********************************************************************************
 273          *
 274          * Summary:
 275          *  Writes a data byte to the LCD module's Data Display RAM.
 276          *
 277          * Parameters:
 278          *  dByte:  byte to be written to LCD module.
 279          *
 280          * Return:
 281          *  None.
 282          *
 283          *******************************************************************************/
 284          void LCD_WriteData(uint8 dByte) 
 285          {
 286   1          uint8 nibble;
 287   1      
 288   1          /* Write high nibble */
 289   1              nibble = dByte >> LCD_NIBBLE_SHIFT;
 290   1          LCD_WrDatNib(nibble);
 291   1      
 292   1           CyDelayUs(LCD_NIB_DELAY_US);
 293   1               
 294   1          /* Write low nibble */
 295   1              nibble = dByte & LCD_NIBBLE_MASK;
 296   1          LCD_WrDatNib(nibble);
 297   1              
 298   1              CyDelayUs(LCD_DATA_DELAY_US);
 299   1      
 300   1      }
 301          
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 6   

 302          
 303          /*******************************************************************************
 304          *  Function Name: LCD_WriteControl
 305          ********************************************************************************
 306          *
 307          * Summary:
 308          *  Writes a command byte to the LCD module.
 309          *
 310          * Parameters:
 311          *  cByte:   byte to be written to LCD module.
 312          *
 313          * Return:
 314          *  None.
 315          *
 316          *******************************************************************************/
 317          void LCD_WriteControl(uint8 cByte) 
 318          {
 319   1          uint8 nibble;
 320   1      
 321   1          /* WrCntrlNib(High Nibble) */
 322   1               nibble = cByte >> LCD_NIBBLE_SHIFT;
 323   1          LCD_WrCntrlNib(nibble);
 324   1      
 325   1          CyDelayUs(LCD_NIB_DELAY_US);
 326   1              
 327   1          /* WrCntrlNib(Low Nibble) */
 328   1              nibble = cByte & LCD_NIBBLE_MASK;
 329   1          LCD_WrCntrlNib(nibble);
 330   1      
 331   1           CyDelayUs(LCD_CMD_DELAY_US);
 332   1      }
 333          
 334          
 335          /*******************************************************************************
 336          * Function Name: LCD_IsReady
 337          ********************************************************************************
 338          *
 339          * Summary:
 340          *  Polls LCD until the ready bit is set.
 341          *
 342          * Parameters:
 343          *  None.
 344          *
 345          * Return:
 346          *  None.
 347          *
 348          * Note:
 349          *  Changes pins to High-Z.
 350          *
 351          *******************************************************************************/
 352          void LCD_IsReady(void) 
 353          {
 354   1         
 355   1              CyDelay(1u);
 356   1              
 357   1      }
 358          
 359          
 360          /*******************************************************************************
 361          *  Function Name: LCD_WrDatNib
 362          ********************************************************************************
 363          *
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 7   

 364          * Summary:
 365          *  Writes a data nibble to the LCD module.
 366          *
 367          * Parameters:
 368          *  nibble:  byte containing nibble in least significant nibble to be written
 369          *           to LCD module.
 370          *
 371          * Return:
 372          *  None.
 373          *
 374          *******************************************************************************/
 375          static void LCD_WrDatNib(uint8 nibble) 
 376          {
 377   1      
 378   1          /* RS shoul be low to select data register */
 379   1          LCD_CNTL_REG |= LCD_RS;
 380   1          /* Reset RW for write operation */
 381   1          LCD_CNTL_REG &= ~LCD_RW;
 382   1      
 383   1          /* Two following lines of code will provide us with 40ns delay */
 384   1          /* Clear data pins */
 385   1          LCD_CNTL_REG &= ~LCD_DATA_MASK;
 386   1      
 387   1          /* Write in data, bring E high*/
 388   1          LCD_CNTL_REG |= (LCD_E | nibble);
 389   1      
 390   1          /* Minimum of 230 ns delay */
 391   1          CyDelayUs(1u);
 392   1      
 393   1          LCD_CNTL_REG &= ~LCD_E;
 394   1              
 395   1      }
 396          
 397          
 398          /*******************************************************************************
 399          *  Function Name: LCD_WrCntrlNib
 400          ********************************************************************************
 401          *
 402          * Summary:
 403          *  Writes a control nibble to the LCD module.
 404          *
 405          * Parameters:
 406          *  nibble:  byte containing nibble in least significant nibble to be written
 407          *           to LCD module.
 408          *
 409          * Return:
 410          *  None.
 411          *
 412          *******************************************************************************/
 413          static void LCD_WrCntrlNib(uint8 nibble) 
 414          {
 415   1              
 416   1              /* RS and RW shoul be low to select instruction register and  write operation respectively */
 417   1          LCD_CNTL_REG &= ~(LCD_RS | LCD_RW);
 418   1      
 419   1          /* Two following lines of code will give provide ua with 40ns delay */
 420   1          /* Clear data pins */
 421   1          LCD_CNTL_REG &= ~LCD_DATA_MASK;
 422   1      
 423   1          /* Write control data and set enable signal */
 424   1          LCD_CNTL_REG |= (LCD_E | nibble);
 425   1      
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 8   

 426   1          /* Minimum of 230 ns delay */
 427   1          CyDelayUs(1u);
 428   1      
 429   1          LCD_CNTL_REG &= ~LCD_E;
 430   1      }
 431          
 432          
 433          #if(LCD_CONVERSION_ROUTINES == 1u)
 434          
 435              /*******************************************************************************
 436              *  Function Name: LCD_PrintInt8
 437              ********************************************************************************
 438              *
 439              * Summary:
 440              *  Print a byte as two ASCII characters.
 441              *
 442              * Parameters:
 443              *  value:  The byte to be printed out as ASCII characters.
 444              *
 445              * Return:
 446              *  None.
 447              *
 448              *******************************************************************************/
 449              void LCD_PrintInt8(uint8 value) 
 450              {
 451   1              static char8 const CYCODE LCD_hex[16u] = "0123456789ABCDEF";
 452   1              
 453   1              LCD_PutChar((char8) LCD_hex[value >> LCD_BYTE_UPPER_NIBBLE_SHIFT]);
 454   1              LCD_PutChar((char8) LCD_hex[value & LCD_BYTE_LOWER_NIBBLE_MASK]);
 455   1          }
 456          
 457          
 458              /*******************************************************************************
 459              *  Function Name: LCD_PrintInt16
 460              ********************************************************************************
 461              *
 462              * Summary:
 463              *  Print a uint16 as four ASCII characters.
 464              *
 465              * Parameters:
 466              *  value:   The uint16 to be printed out as ASCII characters.
 467              *
 468              * Return:
 469              *  None.
 470              *
 471              *******************************************************************************/
 472              void LCD_PrintInt16(uint16 value) 
 473              {
 474   1              LCD_PrintInt8((uint8)(value >> LCD_U16_UPPER_BYTE_SHIFT));
 475   1              LCD_PrintInt8((uint8)(value & LCD_U16_LOWER_BYTE_MASK));
 476   1          }
 477          
 478          
 479              /*******************************************************************************
 480              *  Function Name: LCD_PrintNumber
 481              ********************************************************************************
 482              *
 483              * Summary:
 484              *  Print an uint32 value as a left-justified decimal value.
 485              *
 486              * Parameters:
 487              *  value:  The byte to be printed out as ASCII characters.
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 9   

 488              *
 489              * Return:
 490              *  None.
 491              *
 492              *******************************************************************************/
 493              void LCD_PrintNumber(uint16 value) 
 494              {
 495   1      
 496   1              char8 number[LCD_NUMBER_OF_REMAINDERS];
 497   1              char8 temp[LCD_NUMBER_OF_REMAINDERS];
 498   1      
 499   1              uint8 digIndex = 0u;
 500   1              uint8 numDigits;
 501   1      
 502   1              /* Load these in reverse order */
 503   1              while(value >= LCD_TEN)
 504   1              {
 505   2                  temp[digIndex] = (value % LCD_TEN) + '0';
 506   2                  value /= LCD_TEN;
 507   2                  digIndex++;
 508   2              }
 509   1      
 510   1              temp[digIndex] = (value % LCD_TEN) + '0';
 511   1              numDigits = digIndex;
 512   1      
 513   1              /* While index is greater than or equal to zero copy number
 514   1              * from temporary array to number[].
 515   1              */
 516   1              while (digIndex != 0u)
 517   1              {
 518   2                  number[numDigits - digIndex] = temp[digIndex];
 519   2                  digIndex--;
 520   2              }
 521   1              
 522   1              /* Copy last digit */
 523   1              number[numDigits] = temp[0u];
 524   1      
 525   1              /* Null Termination */
 526   1              number[numDigits + 1u] = (char8) '\0';
 527   1      
 528   1              /* Print out number */
 529   1              LCD_PrintString(&number[0u]);
 530   1          }
 531          
 532          #endif /* LCD_CONVERSION_ROUTINES == 1u */
 533          
 534          
 535          /* [] END OF FILE */
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION LCD_Init (BEGIN)
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 58
0000 7F28              MOV     R7,#028H
0002 7E00              MOV     R6,#00H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 59
000B 7F03              MOV     R7,#03H
000D 120000      R     LCALL   _LCD_WrCntrlNib
                                           ; SOURCE LINE # 60
0010 7F05              MOV     R7,#05H
0012 7E00              MOV     R6,#00H
0014 7D00              MOV     R5,#00H
0016 7C00              MOV     R4,#00H
0018 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 61
001B 7F03              MOV     R7,#03H
001D 120000      R     LCALL   _LCD_WrCntrlNib
                                           ; SOURCE LINE # 62
0020 7F0F              MOV     R7,#0FH
0022 7E00              MOV     R6,#00H
0024 7D00              MOV     R5,#00H
0026 7C00              MOV     R4,#00H
0028 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 63
002B 7F03              MOV     R7,#03H
002D 120000      R     LCALL   _LCD_WrCntrlNib
                                           ; SOURCE LINE # 64
0030 7F01              MOV     R7,#01H
0032 7E00              MOV     R6,#00H
0034 7D00              MOV     R5,#00H
0036 7C00              MOV     R4,#00H
0038 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 65
003B 7F02              MOV     R7,#02H
003D 120000      R     LCALL   _LCD_WrCntrlNib
                                           ; SOURCE LINE # 66
0040 7F05              MOV     R7,#05H
0042 7E00              MOV     R6,#00H
0044 7D00              MOV     R5,#00H
0046 7C00              MOV     R4,#00H
0048 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 68
004B 7F06              MOV     R7,#06H
004D 120000      R     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 69
0050 7F0E              MOV     R7,#0EH
0052 120000      R     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 70
0055 7F2C              MOV     R7,#02CH
0057 120000      R     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 71
005A 7F08              MOV     R7,#08H
005C 120000      R     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 72
005F 7F01              MOV     R7,#01H
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 11  

0061 120000      R     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 73
0064 7F0C              MOV     R7,#0CH
0066 120000      R     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 74
0069 7F03              MOV     R7,#03H
006B 120000      R     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 75
006E 7F05              MOV     R7,#05H
0070 7E00              MOV     R6,#00H
0072 7D00              MOV     R5,#00H
0074 7C00              MOV     R4,#00H
0076 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 78
0079 7BFF              MOV     R3,#0FFH
007B 7A00        E     MOV     R2,#HIGH LCD_customFonts
007D 7900        E     MOV     R1,#LOW LCD_customFonts
007F 120000      E     LCALL   _LCD_LoadCustomFonts
                                           ; SOURCE LINE # 80
0082 22                RET     
             ; FUNCTION LCD_Init (END)

             ; FUNCTION LCD_Enable (BEGIN)
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
0000 7F0C              MOV     R7,#0CH
0002 120000      R     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 107
0005 900000      R     MOV     DPTR,#LCD_enableState
0008 7401              MOV     A,#01H
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
000B 22                RET     
             ; FUNCTION LCD_Enable (END)

             ; FUNCTION LCD_Start (BEGIN)
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 140
0000 900000      R     MOV     DPTR,#LCD_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
0008 120000      R     LCALL   LCD_Init
                                           ; SOURCE LINE # 143
000B 900000      R     MOV     DPTR,#LCD_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
0011         ?C0003:
                                           ; SOURCE LINE # 147
0011 120000      R     LCALL   LCD_Enable
                                           ; SOURCE LINE # 148
0014 22                RET     
             ; FUNCTION LCD_Start (END)

             ; FUNCTION LCD_Stop (BEGIN)
                                           ; SOURCE LINE # 168
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 12  

                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 171
0000 7F08              MOV     R7,#08H
0002 120000      R     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 172
0005 900000      R     MOV     DPTR,#LCD_enableState
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
000A 22                RET     
             ; FUNCTION LCD_Stop (END)

             ; FUNCTION _LCD_Position (BEGIN)
                                           ; SOURCE LINE # 196
0000 900000      R     MOV     DPTR,#row
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#column
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
000A 900000      R     MOV     DPTR,#row
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 120000      E     LCALL   ?C?CCASE
0013 0000        R     DW      ?C0007
0015 00                DB      00H
0016 0000        R     DW      ?C0008
0018 01                DB      01H
0019 0000        R     DW      ?C0009
001B 02                DB      02H
001C 0000        R     DW      ?C0010
001E 03                DB      03H
001F 0000              DW      00H
0021 0000        R     DW      ?C0012
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
0023         ?C0007:
                                           ; SOURCE LINE # 201
0023 900000      R     MOV     DPTR,#column
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 2480              ADD     A,#080H
002B FF                MOV     R7,A
002C 120000      R     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 202
002F 22                RET     
                                           ; SOURCE LINE # 203
0030         ?C0008:
                                           ; SOURCE LINE # 204
0030 900000      R     MOV     DPTR,#column
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 24C0              ADD     A,#0C0H
0038 FF                MOV     R7,A
0039 120000      R     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 205
003C 22                RET     
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 13  

                                           ; SOURCE LINE # 206
003D         ?C0009:
                                           ; SOURCE LINE # 207
003D 900000      R     MOV     DPTR,#column
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 2494              ADD     A,#094H
0045 FF                MOV     R7,A
0046 120000      R     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 208
0049 22                RET     
                                           ; SOURCE LINE # 209
004A         ?C0010:
                                           ; SOURCE LINE # 210
004A 900000      R     MOV     DPTR,#column
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F EF                MOV     A,R7
0050 24D4              ADD     A,#0D4H
0052 FF                MOV     R7,A
0053 120000      R     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
0056         ?C0012:
0056 22                RET     
             ; FUNCTION _LCD_Position (END)

             ; FUNCTION _LCD_PrintString (BEGIN)
                                           ; SOURCE LINE # 233
0000 900000      R     MOV     DPTR,#string
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
0006 900000      R     MOV     DPTR,#indexU8
0009 7401              MOV     A,#01H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 236
000C 900000      R     MOV     DPTR,#string
000F 120000      E     LCALL   ?C?PLDXDATA
0012 120000      E     LCALL   ?C?CLDPTR
0015 FF                MOV     R7,A
0016 900000      R     MOV     DPTR,#current
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
001B         ?C0013:
                                           ; SOURCE LINE # 239
001B 900000      R     MOV     DPTR,#current
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 602A              JZ      ?C0015
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 241
0023 900000      R     MOV     DPTR,#current
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 120000      R     LCALL   _LCD_WriteData
                                           ; SOURCE LINE # 242
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 14  

002B 900000      R     MOV     DPTR,#string
002E 120000      E     LCALL   ?C?PLDXDATA
0031 900000      R     MOV     DPTR,#indexU8
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 E9                MOV     A,R1
0037 2F                ADD     A,R7
0038 F9                MOV     R1,A
0039 E4                CLR     A
003A 3A                ADDC    A,R2
003B FA                MOV     R2,A
003C 120000      E     LCALL   ?C?CLDPTR
003F FF                MOV     R7,A
0040 900000      R     MOV     DPTR,#current
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
0045 900000      R     MOV     DPTR,#indexU8
0048 E0                MOVX    A,@DPTR
0049 04                INC     A
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
004B 80CE              SJMP    ?C0013
                                           ; SOURCE LINE # 245
004D         ?C0015:
004D 22                RET     
             ; FUNCTION _LCD_PrintString (END)

             ; FUNCTION _LCD_PutChar (BEGIN)
                                           ; SOURCE LINE # 264
0000 900000      R     MOV     DPTR,#character
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
0005 900000      R     MOV     DPTR,#character
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 120000      R     LCALL   _LCD_WriteData
                                           ; SOURCE LINE # 267
000D 22                RET     
             ; FUNCTION _LCD_PutChar (END)

             ; FUNCTION _LCD_WriteData (BEGIN)
                                           ; SOURCE LINE # 284
0000 900000      R     MOV     DPTR,#dByte
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 289
0005 900000      R     MOV     DPTR,#dByte
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 540F              ANL     A,#0FH
000E FF                MOV     R7,A
000F 900000      R     MOV     DPTR,#nibble
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 290
0014 900000      R     MOV     DPTR,#nibble
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 15  

0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 120000      R     LCALL   _LCD_WrDatNib
                                           ; SOURCE LINE # 292
001C 7F64              MOV     R7,#064H
001E 7E00              MOV     R6,#00H
0020 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 295
0023 900000      R     MOV     DPTR,#dByte
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 540F              ANL     A,#0FH
002B FF                MOV     R7,A
002C 900000      R     MOV     DPTR,#nibble
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
0031 900000      R     MOV     DPTR,#nibble
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 120000      R     LCALL   _LCD_WrDatNib
                                           ; SOURCE LINE # 298
0039 7F96              MOV     R7,#096H
003B 7E00              MOV     R6,#00H
003D 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 300
0040 22                RET     
             ; FUNCTION _LCD_WriteData (END)

             ; FUNCTION _LCD_WriteControl (BEGIN)
                                           ; SOURCE LINE # 317
0000 900000      R     MOV     DPTR,#cByte
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 322
0005 900000      R     MOV     DPTR,#cByte
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 540F              ANL     A,#0FH
000E FF                MOV     R7,A
000F 900000      R     MOV     DPTR,#nibble
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 323
0014 900000      R     MOV     DPTR,#nibble
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 120000      R     LCALL   _LCD_WrCntrlNib
                                           ; SOURCE LINE # 325
001C 7F64              MOV     R7,#064H
001E 7E00              MOV     R6,#00H
0020 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 328
0023 900000      R     MOV     DPTR,#cByte
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 540F              ANL     A,#0FH
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 16  

002B FF                MOV     R7,A
002C 900000      R     MOV     DPTR,#nibble
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 329
0031 900000      R     MOV     DPTR,#nibble
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 120000      R     LCALL   _LCD_WrCntrlNib
                                           ; SOURCE LINE # 331
0039 7FC4              MOV     R7,#0C4H
003B 7E09              MOV     R6,#09H
003D 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 332
0040 22                RET     
             ; FUNCTION _LCD_WriteControl (END)

             ; FUNCTION LCD_IsReady (BEGIN)
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 355
0000 7F01              MOV     R7,#01H
0002 7E00              MOV     R6,#00H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 357
000B 22                RET     
             ; FUNCTION LCD_IsReady (END)

             ; FUNCTION _LCD_WrDatNib (BEGIN)
                                           ; SOURCE LINE # 375
0000 900000      R     MOV     DPTR,#nibble
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 379
0005 906479            MOV     DPTR,#06479H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 4420              ORL     A,#020H
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 381
0010 906479            MOV     DPTR,#06479H
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 54BF              ANL     A,#0BFH
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 385
001B 906479            MOV     DPTR,#06479H
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 54F0              ANL     A,#0F0H
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 17  

0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 388
0026 906479            MOV     DPTR,#06479H
0029 C083              PUSH    DPH
002B C082              PUSH    DPL
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F 900000      R     MOV     DPTR,#nibble
0032 E0                MOVX    A,@DPTR
0033 FE                MOV     R6,A
0034 EE                MOV     A,R6
0035 4410              ORL     A,#010H
0037 FE                MOV     R6,A
0038 EF                MOV     A,R7
0039 4E                ORL     A,R6
003A FF                MOV     R7,A
003B D082              POP     DPL
003D D083              POP     DPH
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 391
0041 7F01              MOV     R7,#01H
0043 7E00              MOV     R6,#00H
0045 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 393
0048 906479            MOV     DPTR,#06479H
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D EF                MOV     A,R7
004E 54EF              ANL     A,#0EFH
0050 FF                MOV     R7,A
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 395
0053 22                RET     
             ; FUNCTION _LCD_WrDatNib (END)

             ; FUNCTION _LCD_WrCntrlNib (BEGIN)
                                           ; SOURCE LINE # 413
0000 900000      R     MOV     DPTR,#nibble
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 414
                                           ; SOURCE LINE # 417
0005 906479            MOV     DPTR,#06479H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 549F              ANL     A,#09FH
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 421
0010 906479            MOV     DPTR,#06479H
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 54F0              ANL     A,#0F0H
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 424
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 18  

001B 906479            MOV     DPTR,#06479H
001E C083              PUSH    DPH
0020 C082              PUSH    DPL
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 900000      R     MOV     DPTR,#nibble
0027 E0                MOVX    A,@DPTR
0028 FE                MOV     R6,A
0029 EE                MOV     A,R6
002A 4410              ORL     A,#010H
002C FE                MOV     R6,A
002D EF                MOV     A,R7
002E 4E                ORL     A,R6
002F FF                MOV     R7,A
0030 D082              POP     DPL
0032 D083              POP     DPH
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 427
0036 7F01              MOV     R7,#01H
0038 7E00              MOV     R6,#00H
003A 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 429
003D 906479            MOV     DPTR,#06479H
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 54EF              ANL     A,#0EFH
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 430
0048 22                RET     
             ; FUNCTION _LCD_WrCntrlNib (END)

             ; FUNCTION _LCD_PrintInt8 (BEGIN)
                                           ; SOURCE LINE # 449
0000 900000      R     MOV     DPTR,#value
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 450
                                           ; SOURCE LINE # 453
0005 900000      R     MOV     DPTR,#value
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 540F              ANL     A,#0FH
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 900000      R     MOV     DPTR,#LCD_hex
0013 93                MOVC    A,@A+DPTR
0014 FF                MOV     R7,A
0015 120000      R     LCALL   _LCD_PutChar
                                           ; SOURCE LINE # 454
0018 900000      R     MOV     DPTR,#value
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 540F              ANL     A,#0FH
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 19  

0022 900000      R     MOV     DPTR,#LCD_hex
0025 93                MOVC    A,@A+DPTR
0026 FF                MOV     R7,A
0027 120000      R     LCALL   _LCD_PutChar
                                           ; SOURCE LINE # 455
002A 22                RET     
             ; FUNCTION _LCD_PrintInt8 (END)

             ; FUNCTION _LCD_PrintInt16 (BEGIN)
                                           ; SOURCE LINE # 472
0000 900000      R     MOV     DPTR,#value
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 474
0008 900000      R     MOV     DPTR,#value
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EE                MOV     A,R6
0011 FF                MOV     R7,A
0012 7E00              MOV     R6,#00H
0014 120000      R     LCALL   _LCD_PrintInt8
                                           ; SOURCE LINE # 475
0017 900000      R     MOV     DPTR,#value
001A E0                MOVX    A,@DPTR
001B FE                MOV     R6,A
001C A3                INC     DPTR
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 54FF              ANL     A,#0FFH
0022 FF                MOV     R7,A
0023 120000      R     LCALL   _LCD_PrintInt8
                                           ; SOURCE LINE # 476
0026 22                RET     
             ; FUNCTION _LCD_PrintInt16 (END)

             ; FUNCTION _LCD_PrintNumber (BEGIN)
                                           ; SOURCE LINE # 493
0000 900000      R     MOV     DPTR,#value
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 494
                                           ; SOURCE LINE # 499
0008 900000      R     MOV     DPTR,#digIndex
000B E4                CLR     A
000C F0                MOVX    @DPTR,A
000D         ?C0024:
                                           ; SOURCE LINE # 503
000D 900000      R     MOV     DPTR,#value
0010 E0                MOVX    A,@DPTR
0011 FE                MOV     R6,A
0012 A3                INC     DPTR
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 20  

0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 C3                CLR     C
0016 EF                MOV     A,R7
0017 940A              SUBB    A,#0AH
0019 EE                MOV     A,R6
001A 9400              SUBB    A,#00H
001C 4045              JC      ?C0025
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 505
001E 900000      R     MOV     DPTR,#value
0021 E0                MOVX    A,@DPTR
0022 FE                MOV     R6,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 7C00              MOV     R4,#00H
0028 7D0A              MOV     R5,#0AH
002A 120000      E     LCALL   ?C?UIDIV
002D AF05              MOV     R7,AR5
002F EF                MOV     A,R7
0030 2430              ADD     A,#030H
0032 FF                MOV     R7,A
0033 900000      R     MOV     DPTR,#digIndex
0036 E0                MOVX    A,@DPTR
0037 FE                MOV     R6,A
0038 7400        R     MOV     A,#LOW temp
003A 2E                ADD     A,R6
003B F582              MOV     DPL,A
003D E4                CLR     A
003E 3400        R     ADDC    A,#HIGH temp
0040 F583              MOV     DPH,A
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 506
0044 900000      R     MOV     DPTR,#value
0047 E0                MOVX    A,@DPTR
0048 FE                MOV     R6,A
0049 A3                INC     DPTR
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C 7C00              MOV     R4,#00H
004E 7D0A              MOV     R5,#0AH
0050 120000      E     LCALL   ?C?UIDIV
0053 900000      R     MOV     DPTR,#value
0056 EE                MOV     A,R6
0057 F0                MOVX    @DPTR,A
0058 A3                INC     DPTR
0059 EF                MOV     A,R7
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 507
005B 900000      R     MOV     DPTR,#digIndex
005E E0                MOVX    A,@DPTR
005F 04                INC     A
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 508
0061 80AA              SJMP    ?C0024
0063         ?C0025:
                                           ; SOURCE LINE # 510
0063 900000      R     MOV     DPTR,#value
0066 E0                MOVX    A,@DPTR
0067 FE                MOV     R6,A
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 21  

0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B 7C00              MOV     R4,#00H
006D 7D0A              MOV     R5,#0AH
006F 120000      E     LCALL   ?C?UIDIV
0072 AF05              MOV     R7,AR5
0074 EF                MOV     A,R7
0075 2430              ADD     A,#030H
0077 FF                MOV     R7,A
0078 900000      R     MOV     DPTR,#digIndex
007B E0                MOVX    A,@DPTR
007C FE                MOV     R6,A
007D 7400        R     MOV     A,#LOW temp
007F 2E                ADD     A,R6
0080 F582              MOV     DPL,A
0082 E4                CLR     A
0083 3400        R     ADDC    A,#HIGH temp
0085 F583              MOV     DPH,A
0087 EF                MOV     A,R7
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 511
0089 900000      R     MOV     DPTR,#digIndex
008C E0                MOVX    A,@DPTR
008D FF                MOV     R7,A
008E 900000      R     MOV     DPTR,#numDigits
0091 EF                MOV     A,R7
0092 F0                MOVX    @DPTR,A
0093         ?C0026:
                                           ; SOURCE LINE # 516
0093 900000      R     MOV     DPTR,#digIndex
0096 E0                MOVX    A,@DPTR
0097 FF                MOV     R7,A
0098 EF                MOV     A,R7
0099 603E              JZ      ?C0027
                                           ; SOURCE LINE # 517
                                           ; SOURCE LINE # 518
009B 900000      R     MOV     DPTR,#digIndex
009E E0                MOVX    A,@DPTR
009F FF                MOV     R7,A
00A0 7400        R     MOV     A,#LOW temp
00A2 2F                ADD     A,R7
00A3 F582              MOV     DPL,A
00A5 E4                CLR     A
00A6 3400        R     ADDC    A,#HIGH temp
00A8 F583              MOV     DPH,A
00AA E0                MOVX    A,@DPTR
00AB FF                MOV     R7,A
00AC 900000      R     MOV     DPTR,#digIndex
00AF E0                MOVX    A,@DPTR
00B0 FE                MOV     R6,A
00B1 EE                MOV     A,R6
00B2 FD                MOV     R5,A
00B3 7C00              MOV     R4,#00H
00B5 900000      R     MOV     DPTR,#numDigits
00B8 E0                MOVX    A,@DPTR
00B9 FE                MOV     R6,A
00BA EE                MOV     A,R6
00BB FB                MOV     R3,A
00BC 7A00              MOV     R2,#00H
00BE C3                CLR     C
00BF EB                MOV     A,R3
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 22  

00C0 9D                SUBB    A,R5
00C1 FD                MOV     R5,A
00C2 EA                MOV     A,R2
00C3 9C                SUBB    A,R4
00C4 FC                MOV     R4,A
00C5 7400        R     MOV     A,#LOW number
00C7 2D                ADD     A,R5
00C8 F582              MOV     DPL,A
00CA 7400        R     MOV     A,#HIGH number
00CC 3C                ADDC    A,R4
00CD F583              MOV     DPH,A
00CF EF                MOV     A,R7
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 519
00D1 900000      R     MOV     DPTR,#digIndex
00D4 E0                MOVX    A,@DPTR
00D5 14                DEC     A
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 520
00D7 80BA              SJMP    ?C0026
00D9         ?C0027:
                                           ; SOURCE LINE # 523
00D9 900000      R     MOV     DPTR,#temp
00DC E0                MOVX    A,@DPTR
00DD FF                MOV     R7,A
00DE 900000      R     MOV     DPTR,#numDigits
00E1 E0                MOVX    A,@DPTR
00E2 FE                MOV     R6,A
00E3 7400        R     MOV     A,#LOW number
00E5 2E                ADD     A,R6
00E6 F582              MOV     DPL,A
00E8 E4                CLR     A
00E9 3400        R     ADDC    A,#HIGH number
00EB F583              MOV     DPH,A
00ED EF                MOV     A,R7
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
00EF 900000      R     MOV     DPTR,#numDigits
00F2 E0                MOVX    A,@DPTR
00F3 FF                MOV     R7,A
00F4 7400        R     MOV     A,#LOW number+01H
00F6 2F                ADD     A,R7
00F7 F582              MOV     DPL,A
00F9 E4                CLR     A
00FA 3400        R     ADDC    A,#HIGH number+01H
00FC F583              MOV     DPH,A
00FE E4                CLR     A
00FF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 529
0100 7B01              MOV     R3,#01H
0102 7A00        R     MOV     R2,#HIGH number
0104 7900        R     MOV     R1,#LOW number
0106 120000      R     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 530
0109 22                RET     
             ; FUNCTION _LCD_PrintNumber (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1001    ----
   CONSTANT SIZE    =     16    ----
C51 COMPILER V9.03   LCD                                                                   03/20/2013 20:48:45 PAGE 23  

   XDATA SIZE       =      2      31
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
