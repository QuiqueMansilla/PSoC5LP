C51 COMPILER V9.03   CYFITTER_CFG                                                          03/20/2013 20:48:47 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.2\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.lst)
                    - CD DB NOIP OT(2,SIZE) DF(DEBUG) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator 2.2 Nightly Build 293
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.  Except for the user defined sections in
   8          * CyClockStartupError(), this file should not be modified.
   9          *
  10          ********************************************************************************
  11          * Copyright 2012, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          ********************************************************************************/
  16          
  17          #include <string.h>
  18          #include <cytypes.h>
  19          #include <cydevice_trm.h>
  20          #include <cyfitter.h>
  21          #include <CyLib.h>
  22          #include <cyfitter_cfg.h>
  23          
  24          /* Clock startup error codes                                                   */
  25          #define CYCLOCKSTART_NO_ERROR    0u
  26          #define CYCLOCKSTART_XTAL_ERROR  1u
  27          #define CYCLOCKSTART_32KHZ_ERROR 2u
  28          #define CYCLOCKSTART_PLL_ERROR   3u
  29          
  30          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
              /*******************************************************************************
              * Function Name: CyClockStartupError
              ********************************************************************************
              * Summary:
              *  If an error is encountered during clock configuration (crystal startup error,
              *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
              *  the customer, this function will stop in an infinite loop.
              *
              * Parameters:
              *   void
              *
              * Return:
              *   void
              *
              *******************************************************************************/
              #if defined(__GNUC__) || defined(__ARMCC_VERSION)
              __attribute__ ((unused))
              #endif
              static void CyClockStartupError(uint8 errorCode);
              #if defined(__GNUC__) || defined(__ARMCC_VERSION)
              __attribute__ ((unused))
              #endif
              static void CyClockStartupError(uint8 errorCode)
C51 COMPILER V9.03   CYFITTER_CFG                                                          03/20/2013 20:48:47 PAGE 2   

              {
                  /* To remove the compiler warning if errorCode not used.                */
                  errorCode = errorCode;
              
                  /* `#START CyClockStartupError` */
              
                  /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
                  /* we will end up here to allow the customer to implement something to  */
                  /* deal with the clock condition.                                       */
              
                  /* `#END` */
              
                  /* If nothing else, stop here since the clocks have not started         */
                  /* correctly.                                                           */
                  while(1) {}
              }
              #endif
  71          
  72          
  73          #if defined(__C51__) || defined(__CX51__)
  74                  #define CYPACKED
  75                  #define CYALIGNED
  76                  
  77                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  78          
  79          
  80          
  81                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  82                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  83                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  84          #else
                      #error Unsupported toolchain
              #endif
  87          
  88          #define cfg_byte_table ((const void CYFAR *)0x080000u)
  89          /* IOPINS0_1 Address: CYREG_PRT1_DM0 Size (bytes): 8 */
  90          #define BS_IOPINS0_1_VAL ((const uint8 CYFAR *)0x00080064u)
  91          
  92          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
  93          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)0x0008006Cu)
  94          
  95          
  96          /*******************************************************************************
  97          * Function Name: ClockSetup
  98          ********************************************************************************
  99          *
 100          * Summary:
 101          *  Performs the initialization of all of the clocks in the device based on the
 102          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 103          *  clocks and setting the necessary dividers to produce the desired frequency. 
 104          *
 105          * Parameters:
 106          *  void
 107          *
 108          * Return:
 109          *  void
 110          *
 111          *******************************************************************************/
 112          static void ClockSetup(void);
 113          static void ClockSetup(void)
 114          {
 115   1              uint32 timeout;
C51 COMPILER V9.03   CYFITTER_CFG                                                          03/20/2013 20:48:47 PAGE 3   

 116   1              uint8 pllLock;
 117   1      
 118   1      
 119   1              /* Configure ILO based on settings from Clock DWR */
 120   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02u);
 121   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08u);
 122   1      
 123   1              /* Configure IMO based on settings from Clock DWR */
 124   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03u);
 125   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_3MHZ)));
 126   1      
 127   1              /* Configure PLL based on settings from Clock DWR */
 128   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0008u);
 129   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1051u);
 130   1              /* Wait up to 250us for the PLL to lock */
 131   1              pllLock = 0u;
 132   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--) { 
 133   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 134   2                      CyDelayCycles(10u * 12u); /* Delay 10us based on 12MHz clock */
 135   2              }
 136   1      
 137   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 138   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 139   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 140   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 141   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 142   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 143   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 144   1      }
 145          
 146          
 147          /* Analog API Functions */
 148          
 149          
 150          /*******************************************************************************
 151          * Function Name: AnalogSetDefault
 152          ********************************************************************************
 153          *
 154          * Summary:
 155          *  Sets up the analog portions of the chip to default values based on chip
 156          *  configuration options from the project.
 157          *
 158          * Parameters:
 159          *  void
 160          *
 161          * Return:
 162          *  void
 163          *
 164          *******************************************************************************/
 165          static void AnalogSetDefault(void);
 166          static void AnalogSetDefault(void)
 167          {
 168   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 169   1              CY_SET_REG8((void CYXDATA *)CYREG_BG_DFT0, bg_xover_inl_trim & 0x07u);
 170   1              CY_SET_REG8((void CYXDATA *)CYREG_BG_DFT1, ((uint8)((uint8)bg_xover_inl_trim >> 4)) & 0x0Fu);
 171   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 172   1      }
 173          
 174          
 175          /*******************************************************************************
C51 COMPILER V9.03   CYFITTER_CFG                                                          03/20/2013 20:48:47 PAGE 4   

 176          * Function Name: SetAnalogRoutingPumps
 177          ********************************************************************************
 178          *
 179          * Summary:
 180          * Enables or disables the analog pumps feeding analog routing switches.
 181          * Intended to be called at startup, based on the Vdda system configuration;
 182          * may be called during operation when the user informs us that the Vdda voltage
 183          * crossed the pump threshold.
 184          *
 185          * Parameters:
 186          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 187          *
 188          * Return:
 189          *  void
 190          *
 191          *******************************************************************************/
 192          void SetAnalogRoutingPumps(uint8 enabled)
 193          {
 194   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 195   1              if (enabled != 0u)
 196   1              {
 197   2                      regValue |= 0x00u;
 198   2              }
 199   1              else
 200   1              {
 201   2                      regValue &= (uint8)~0x00u;
 202   2              }
 203   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 204   1      }
 205          
 206          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 207          
 208          
 209          /*******************************************************************************
 210          * Function Name: cyfitter_cfg
 211          ********************************************************************************
 212          * Summary:
 213          *  This function is called by the start-up code for the selected device. It
 214          *  performs all of the necessary device configuration based on the design
 215          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 216          *  as Clocks and Pins as well as any component configuration that is necessary.
 217          *
 218          * Parameters:  
 219          *   void
 220          *
 221          * Return:
 222          *   void
 223          *
 224          *******************************************************************************/
 225          void cyfitter_cfg(void)
 226          {
 227   1      
 228   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 229   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 230   1              /* Setup clocks based on selections from Clock DWR */
 231   1              ClockSetup();
 232   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 233   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xB1u : 0x80u));
 234   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 235   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 236   1      
C51 COMPILER V9.03   CYFITTER_CFG                                                          03/20/2013 20:48:47 PAGE 5   

 237   1              {
 238   2      
 239   2                      typedef struct {
 240   2                              void CYFAR *address;
 241   2                              uint16 size;
 242   2                      } CYPACKED cfg_memset_t;
 243   2      
 244   2                      static const cfg_memset_t CYCODE cfg_memset_list [] = {
 245   2                              /* address, size */
 246   2                              {(void CYFAR *)(CYREG_PRT0_DR), 16u},
 247   2                              {(void CYFAR *)(CYREG_PRT3_DR), 64u},
 248   2                              {(void CYFAR *)(CYREG_PRT12_DR), 16u},
 249   2                              {(void CYFAR *)(CYREG_PRT15_DR), 16u},
 250   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 4096u},
 251   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 252   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
 253   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 254   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
 255   2                      };
 256   2      
 257   2                      uint8 CYDATA i;
 258   2      
 259   2                      /* Zero out critical memory blocks before beginning configuration */
 260   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 261   2                      {
 262   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 263   3                              CYMEMZERO(ms->address, ms->size);
 264   3                      }
 265   2      
 266   2                      cfg_write_bytes(cfg_byte_table);
 267   2      
 268   2                      /* Enable digital routing */
 269   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 270   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 271   2      
 272   2                      /* Enable UDB array */
 273   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 274   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 275   2              }
 276   1      
 277   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 278   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT1_DM0), (const void CYFAR *)(BS_IOPINS0_1_VAL), 8u);
 279   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (const void CYFAR *)(BS_IOPINS0_2_VAL), 8u);
 280   1      
 281   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 282   1              CY_SET_REG8((void CYXDATA *)CYDEV_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYDEV_BOOST_CR2) | 0x08u));
 283   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 284   1              {
 285   2                      CY_SET_REG8((void CYXDATA *)CYDEV_MFGCFG_PWRSYS_WAKE_TR2, 0x3Au);
 286   2              }
 287   1      
 288   1      
 289   1              /* Perform basic analog initialization to defaults */
 290   1              AnalogSetDefault();
 291   1      
 292   1              /* Configure alternate active mode */
 293   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 294   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
C51 COMPILER V9.03   CYFITTER_CFG                                                          03/20/2013 20:48:47 PAGE 6   

             -~0x02u);        /* Disable CPU */
 295   1      }
C51 COMPILER V9.03   CYFITTER_CFG                                                          03/20/2013 20:48:47 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 120
0000 904300            MOV     DPTR,#04300H
0003 7402              MOV     A,#02H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 121
0006 904000            MOV     DPTR,#04000H
0009 7408              MOV     A,#08H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 124
000C 904200            MOV     DPTR,#04200H
000F 7403              MOV     A,#03H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 125
0012 7B0C              MOV     R3,#0CH
0014 7A01              MOV     R2,#01H
0016 7908              MOV     R1,#08H
0018 120000      E     LCALL   _cyread8
001B 9046A1            MOV     DPTR,#046A1H
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
0020 7B00              MOV     R3,#00H
0022 7A42              MOV     R2,#042H
0024 7922              MOV     R1,#022H
0026 7D08              MOV     R5,#08H
0028 7C00              MOV     R4,#00H
002A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 129
002D 7B00              MOV     R3,#00H
002F 7A42              MOV     R2,#042H
0031 7920              MOV     R1,#020H
0033 7D51              MOV     R5,#051H
0035 7C10              MOV     R4,#010H
0037 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 131
003A 900000      R     MOV     DPTR,#pllLock
003D E4                CLR     A
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
003F 7F19              MOV     R7,#019H
0041 7E00              MOV     R6,#00H
0043 7D00              MOV     R5,#00H
0045 7C00              MOV     R4,#00H
0047 900000      R     MOV     DPTR,#timeout
004A 120000      E     LCALL   ?C?LSTXDATA
004D         ?C0001:
004D 900000      R     MOV     DPTR,#timeout
0050 120000      E     LCALL   ?C?LLDXDATA
0053 D3                SETB    C
0054 EF                MOV     A,R7
0055 9400              SUBB    A,#00H
0057 EE                MOV     A,R6
0058 9400              SUBB    A,#00H
005A 404E              JC      ?C0002
005C 900000      R     MOV     DPTR,#pllLock
005F E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYFITTER_CFG                                                          03/20/2013 20:48:47 PAGE 8   

0060 FF                MOV     R7,A
0061 EF                MOV     A,R7
0062 6403              XRL     A,#03H
0064 6044              JZ      ?C0002
                                           ; SOURCE LINE # 133
0066 904225            MOV     DPTR,#04225H
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C 5401              ANL     A,#01H
006E FF                MOV     R7,A
006F 7E00              MOV     R6,#00H
0071 900000      R     MOV     DPTR,#pllLock
0074 E0                MOVX    A,@DPTR
0075 FE                MOV     R6,A
0076 EE                MOV     A,R6
0077 25E0              ADD     A,ACC
0079 FE                MOV     R6,A
007A EE                MOV     A,R6
007B 4F                ORL     A,R7
007C FF                MOV     R7,A
007D EF                MOV     A,R7
007E 5403              ANL     A,#03H
0080 FF                MOV     R7,A
0081 900000      R     MOV     DPTR,#pllLock
0084 EF                MOV     A,R7
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 134
0086 7F78              MOV     R7,#078H
0088 7E00              MOV     R6,#00H
008A 7D00              MOV     R5,#00H
008C 7C00              MOV     R4,#00H
008E 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 135
0091 900000      R     MOV     DPTR,#timeout
0094 120000      E     LCALL   ?C?LLDXDATA
0097 7BFF              MOV     R3,#0FFH
0099 7AFF              MOV     R2,#0FFH
009B 79FF              MOV     R1,#0FFH
009D 78FF              MOV     R0,#0FFH
009F 120000      E     LCALL   ?C?LADD
00A2 900000      R     MOV     DPTR,#timeout
00A5 120000      E     LCALL   ?C?LSTXDATA
00A8 80A3              SJMP    ?C0001
00AA         ?C0002:
                                           ; SOURCE LINE # 138
00AA 7B00              MOV     R3,#00H
00AC 7A40              MOV     R2,#040H
00AE 7904              MOV     R1,#04H
00B0 7D00              MOV     R5,#00H
00B2 7C01              MOV     R4,#01H
00B4 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 139
00B7 904004            MOV     DPTR,#04004H
00BA 7407              MOV     A,#07H
00BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
00BD 904006            MOV     DPTR,#04006H
00C0 E4                CLR     A
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
00C2 904008            MOV     DPTR,#04008H
C51 COMPILER V9.03   CYFITTER_CFG                                                          03/20/2013 20:48:47 PAGE 9   

00C5 7448              MOV     A,#048H
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
00C8 904004            MOV     DPTR,#04004H
00CB E4                CLR     A
00CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
00CD 904001            MOV     DPTR,#04001H
00D0 7402              MOV     A,#02H
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
00D3 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 167
                                           ; SOURCE LINE # 168
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 169
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 170
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
002F 905876            MOV     DPTR,#05876H
0032 7444              MOV     A,#044H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
0035 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 192
0000 900000      R     MOV     DPTR,#enabled
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYFITTER_CFG                                                          03/20/2013 20:48:47 PAGE 10  

                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 194
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#regValue
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 195
000F 900000      R     MOV     DPTR,#enabled
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0006
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
0017 900000      R     MOV     DPTR,#regValue
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4400              ORL     A,#00H
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#regValue
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 198
0025 800E              SJMP    ?C0007
0027         ?C0006:
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
0027 900000      R     MOV     DPTR,#regValue
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54FF              ANL     A,#0FFH
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#regValue
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
0035         ?C0007:
                                           ; SOURCE LINE # 203
0035 900000      R     MOV     DPTR,#regValue
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 905876            MOV     DPTR,#05876H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
003F 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 229
0000 904800            MOV     DPTR,#04800H
0003 74F1              MOV     A,#0F1H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 231
0006 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 233
C51 COMPILER V9.03   CYFITTER_CFG                                                          03/20/2013 20:48:47 PAGE 11  

0009 904800            MOV     DPTR,#04800H
000C 74B1              MOV     A,#0B1H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 235
000F 7B00              MOV     R3,#00H
0011 7A46              MOV     R2,#046H
0013 79E8              MOV     R1,#0E8H
0015 120000      E     LCALL   _cyread8
0018 EF                MOV     A,R7
0019 4405              ORL     A,#05H
001B FD                MOV     R5,A
001C 7B00              MOV     R3,#00H
001E 7A46              MOV     R2,#046H
0020 79E8              MOV     R1,#0E8H
0022 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 260
0025 750000      R     MOV     i,#00H
0028         ?C0009:
0028 E500        R     MOV     A,i
002A C3                CLR     C
002B 9409              SUBB    A,#09H
002D 503A              JNC     ?C0010
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
002F AF00        R     MOV     R7,i
0031 EF                MOV     A,R7
0032 75F005            MOV     B,#05H
0035 A4                MUL     AB
0036 2400        R     ADD     A,#LOW cfg_memset_list
0038 F582              MOV     DPL,A
003A E4                CLR     A
003B 3400        R     ADDC    A,#HIGH cfg_memset_list
003D F583              MOV     DPH,A
003F AF82              MOV     R7,DPL
0041 AE83              MOV     R6,DPH
0043 8E00        R     MOV     ms,R6
0045 8F00        R     MOV     ms+01H,R7
                                           ; SOURCE LINE # 263
0047 AE00        R     MOV     R6,ms
0049 AF00        R     MOV     R7,ms+01H
004B 8F82              MOV     DPL,R7
004D 8E83              MOV     DPH,R6
004F 120000      E     LCALL   ?C?PLDCODE
0052 AE00        R     MOV     R6,ms
0054 AF00        R     MOV     R7,ms+01H
0056 8F82              MOV     DPL,R7
0058 8E83              MOV     DPH,R6
005A 7403              MOV     A,#03H
005C 93                MOVC    A,@A+DPTR
005D FC                MOV     R4,A
005E 7404              MOV     A,#04H
0060 93                MOVC    A,@A+DPTR
0061 FD                MOV     R5,A
0062 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 264
0065 0500        R     INC     i
0067 80BF              SJMP    ?C0009
0069         ?C0010:
                                           ; SOURCE LINE # 266
0069 7B08              MOV     R3,#08H
006B 7A00              MOV     R2,#00H
C51 COMPILER V9.03   CYFITTER_CFG                                                          03/20/2013 20:48:47 PAGE 12  

006D 7900              MOV     R1,#00H
006F 120000      E     LCALL   _cfg_write_bytes
                                           ; SOURCE LINE # 269
0072 7B01              MOV     R3,#01H
0074 7A50              MOV     R2,#050H
0076 7903              MOV     R1,#03H
0078 120000      E     LCALL   _cyread8
007B EF                MOV     A,R7
007C 4402              ORL     A,#02H
007E FD                MOV     R5,A
007F 7B01              MOV     R3,#01H
0081 7A50              MOV     R2,#050H
0083 7903              MOV     R1,#03H
0085 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 270
0088 7B01              MOV     R3,#01H
008A 7A50              MOV     R2,#050H
008C 7913              MOV     R1,#013H
008E 120000      E     LCALL   _cyread8
0091 EF                MOV     A,R7
0092 4402              ORL     A,#02H
0094 FD                MOV     R5,A
0095 7B01              MOV     R3,#01H
0097 7A50              MOV     R2,#050H
0099 7913              MOV     R1,#013H
009B 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 273
009E 9043A0            MOV     DPTR,#043A0H
00A1 E0                MOVX    A,@DPTR
00A2 FF                MOV     R7,A
00A3 EF                MOV     A,R7
00A4 4440              ORL     A,#040H
00A6 FF                MOV     R7,A
00A7 9043A0            MOV     DPTR,#043A0H
00AA EF                MOV     A,R7
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 274
00AC 9043C2            MOV     DPTR,#043C2H
00AF E0                MOVX    A,@DPTR
00B0 FF                MOV     R7,A
00B1 EF                MOV     A,R7
00B2 4410              ORL     A,#010H
00B4 FF                MOV     R7,A
00B5 9043C2            MOV     DPTR,#043C2H
00B8 EF                MOV     A,R7
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 275
                                           ; SOURCE LINE # 278
00BA 7B08              MOV     R3,#08H
00BC 7A00              MOV     R2,#00H
00BE 7964              MOV     R1,#064H
00C0 C003              PUSH    AR3
00C2 C002              PUSH    AR2
00C4 C001              PUSH    AR1
00C6 7B00              MOV     R3,#00H
00C8 7A51              MOV     R2,#051H
00CA 7912              MOV     R1,#012H
00CC 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00CF 120000      E     LCALL   ?C?PSTXDATA
00D2 D001              POP     AR1
00D4 D002              POP     AR2
00D6 D003              POP     AR3
C51 COMPILER V9.03   CYFITTER_CFG                                                          03/20/2013 20:48:47 PAGE 13  

00D8 7F08              MOV     R7,#08H
00DA 7E00              MOV     R6,#00H
00DC 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 279
00DF 7B08              MOV     R3,#08H
00E1 7A00              MOV     R2,#00H
00E3 796C              MOV     R1,#06CH
00E5 C003              PUSH    AR3
00E7 C002              PUSH    AR2
00E9 C001              PUSH    AR1
00EB 7B00              MOV     R3,#00H
00ED 7A51              MOV     R2,#051H
00EF 7922              MOV     R1,#022H
00F1 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00F4 120000      E     LCALL   ?C?PSTXDATA
00F7 D001              POP     AR1
00F9 D002              POP     AR2
00FB D003              POP     AR3
00FD 7F08              MOV     R7,#08H
00FF 7E00              MOV     R6,#00H
0101 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 282
0104 904322            MOV     DPTR,#04322H
0107 E0                MOVX    A,@DPTR
0108 FF                MOV     R7,A
0109 EF                MOV     A,R7
010A 4408              ORL     A,#08H
010C FF                MOV     R7,A
010D 904322            MOV     DPTR,#04322H
0110 EF                MOV     A,R7
0111 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 283
0112 9046EC            MOV     DPTR,#046ECH
0115 E0                MOVX    A,@DPTR
0116 FF                MOV     R7,A
0117 EF                MOV     A,R7
0118 C3                CLR     C
0119 9405              SUBB    A,#05H
011B 5006              JNC     ?C0012
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 285
011D 904689            MOV     DPTR,#04689H
0120 743A              MOV     A,#03AH
0122 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 286
0123         ?C0012:
                                           ; SOURCE LINE # 290
0123 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 293
0126 7B00              MOV     R3,#00H
0128 7A43              MOV     R2,#043H
012A 79A0              MOV     R1,#0A0H
012C C003              PUSH    AR3
012E C002              PUSH    AR2
0130 C001              PUSH    AR1
0132 7B00              MOV     R3,#00H
0134 7A43              MOV     R2,#043H
0136 79B0              MOV     R1,#0B0H
0138 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
013B 120000      E     LCALL   ?C?PSTXDATA
013E D001              POP     AR1
0140 D002              POP     AR2
C51 COMPILER V9.03   CYFITTER_CFG                                                          03/20/2013 20:48:47 PAGE 14  

0142 D003              POP     AR3
0144 7F0E              MOV     R7,#0EH
0146 7E00              MOV     R6,#00H
0148 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 294
014B 9043B0            MOV     DPTR,#043B0H
014E E0                MOVX    A,@DPTR
014F FF                MOV     R7,A
0150 EF                MOV     A,R7
0151 54FD              ANL     A,#0FDH
0153 FF                MOV     R7,A
0154 EF                MOV     A,R7
0155 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 295
0156 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    673    ----
   CONSTANT SIZE    =     45    ----
   XDATA SIZE       =   ----       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
